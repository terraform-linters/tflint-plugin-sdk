// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RuleSetClient is the client API for RuleSet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuleSetClient interface {
	RuleSetName(ctx context.Context, in *RuleSetName_Request, opts ...grpc.CallOption) (*RuleSetName_Response, error)
	RuleSetVersion(ctx context.Context, in *RuleSetVersion_Request, opts ...grpc.CallOption) (*RuleSetVersion_Response, error)
	RuleNames(ctx context.Context, in *RuleNames_Request, opts ...grpc.CallOption) (*RuleNames_Response, error)
	ConfigSchema(ctx context.Context, in *ConfigSchema_Request, opts ...grpc.CallOption) (*ConfigSchema_Response, error)
	ApplyConfig(ctx context.Context, in *ApplyConfig_Request, opts ...grpc.CallOption) (*ApplyConfig_Response, error)
	Check(ctx context.Context, in *Check_Request, opts ...grpc.CallOption) (*Check_Response, error)
}

type ruleSetClient struct {
	cc grpc.ClientConnInterface
}

func NewRuleSetClient(cc grpc.ClientConnInterface) RuleSetClient {
	return &ruleSetClient{cc}
}

func (c *ruleSetClient) RuleSetName(ctx context.Context, in *RuleSetName_Request, opts ...grpc.CallOption) (*RuleSetName_Response, error) {
	out := new(RuleSetName_Response)
	err := c.cc.Invoke(ctx, "/proto.RuleSet/RuleSetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleSetClient) RuleSetVersion(ctx context.Context, in *RuleSetVersion_Request, opts ...grpc.CallOption) (*RuleSetVersion_Response, error) {
	out := new(RuleSetVersion_Response)
	err := c.cc.Invoke(ctx, "/proto.RuleSet/RuleSetVersion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleSetClient) RuleNames(ctx context.Context, in *RuleNames_Request, opts ...grpc.CallOption) (*RuleNames_Response, error) {
	out := new(RuleNames_Response)
	err := c.cc.Invoke(ctx, "/proto.RuleSet/RuleNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleSetClient) ConfigSchema(ctx context.Context, in *ConfigSchema_Request, opts ...grpc.CallOption) (*ConfigSchema_Response, error) {
	out := new(ConfigSchema_Response)
	err := c.cc.Invoke(ctx, "/proto.RuleSet/ConfigSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleSetClient) ApplyConfig(ctx context.Context, in *ApplyConfig_Request, opts ...grpc.CallOption) (*ApplyConfig_Response, error) {
	out := new(ApplyConfig_Response)
	err := c.cc.Invoke(ctx, "/proto.RuleSet/ApplyConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ruleSetClient) Check(ctx context.Context, in *Check_Request, opts ...grpc.CallOption) (*Check_Response, error) {
	out := new(Check_Response)
	err := c.cc.Invoke(ctx, "/proto.RuleSet/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuleSetServer is the server API for RuleSet service.
// All implementations must embed UnimplementedRuleSetServer
// for forward compatibility
type RuleSetServer interface {
	RuleSetName(context.Context, *RuleSetName_Request) (*RuleSetName_Response, error)
	RuleSetVersion(context.Context, *RuleSetVersion_Request) (*RuleSetVersion_Response, error)
	RuleNames(context.Context, *RuleNames_Request) (*RuleNames_Response, error)
	ConfigSchema(context.Context, *ConfigSchema_Request) (*ConfigSchema_Response, error)
	ApplyConfig(context.Context, *ApplyConfig_Request) (*ApplyConfig_Response, error)
	Check(context.Context, *Check_Request) (*Check_Response, error)
	mustEmbedUnimplementedRuleSetServer()
}

// UnimplementedRuleSetServer must be embedded to have forward compatible implementations.
type UnimplementedRuleSetServer struct {
}

func (UnimplementedRuleSetServer) RuleSetName(context.Context, *RuleSetName_Request) (*RuleSetName_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuleSetName not implemented")
}
func (UnimplementedRuleSetServer) RuleSetVersion(context.Context, *RuleSetVersion_Request) (*RuleSetVersion_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuleSetVersion not implemented")
}
func (UnimplementedRuleSetServer) RuleNames(context.Context, *RuleNames_Request) (*RuleNames_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RuleNames not implemented")
}
func (UnimplementedRuleSetServer) ConfigSchema(context.Context, *ConfigSchema_Request) (*ConfigSchema_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigSchema not implemented")
}
func (UnimplementedRuleSetServer) ApplyConfig(context.Context, *ApplyConfig_Request) (*ApplyConfig_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyConfig not implemented")
}
func (UnimplementedRuleSetServer) Check(context.Context, *Check_Request) (*Check_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedRuleSetServer) mustEmbedUnimplementedRuleSetServer() {}

// UnsafeRuleSetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuleSetServer will
// result in compilation errors.
type UnsafeRuleSetServer interface {
	mustEmbedUnimplementedRuleSetServer()
}

func RegisterRuleSetServer(s grpc.ServiceRegistrar, srv RuleSetServer) {
	s.RegisterService(&RuleSet_ServiceDesc, srv)
}

func _RuleSet_RuleSetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleSetName_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSetServer).RuleSetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RuleSet/RuleSetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSetServer).RuleSetName(ctx, req.(*RuleSetName_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleSet_RuleSetVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleSetVersion_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSetServer).RuleSetVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RuleSet/RuleSetVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSetServer).RuleSetVersion(ctx, req.(*RuleSetVersion_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleSet_RuleNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RuleNames_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSetServer).RuleNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RuleSet/RuleNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSetServer).RuleNames(ctx, req.(*RuleNames_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleSet_ConfigSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConfigSchema_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSetServer).ConfigSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RuleSet/ConfigSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSetServer).ConfigSchema(ctx, req.(*ConfigSchema_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleSet_ApplyConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyConfig_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSetServer).ApplyConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RuleSet/ApplyConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSetServer).ApplyConfig(ctx, req.(*ApplyConfig_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuleSet_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Check_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuleSetServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.RuleSet/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuleSetServer).Check(ctx, req.(*Check_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// RuleSet_ServiceDesc is the grpc.ServiceDesc for RuleSet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuleSet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.RuleSet",
	HandlerType: (*RuleSetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RuleSetName",
			Handler:    _RuleSet_RuleSetName_Handler,
		},
		{
			MethodName: "RuleSetVersion",
			Handler:    _RuleSet_RuleSetVersion_Handler,
		},
		{
			MethodName: "RuleNames",
			Handler:    _RuleSet_RuleNames_Handler,
		},
		{
			MethodName: "ConfigSchema",
			Handler:    _RuleSet_ConfigSchema_Handler,
		},
		{
			MethodName: "ApplyConfig",
			Handler:    _RuleSet_ApplyConfig_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _RuleSet_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interface.proto",
}

// RunnerClient is the client API for Runner service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RunnerClient interface {
	ResourceContent(ctx context.Context, in *ResourceContent_Request, opts ...grpc.CallOption) (*ResourceContent_Response, error)
	File(ctx context.Context, in *File_Request, opts ...grpc.CallOption) (*File_Response, error)
	EvaluateExpr(ctx context.Context, in *EvaluateExpr_Request, opts ...grpc.CallOption) (*EvaluateExpr_Response, error)
	EmitIssue(ctx context.Context, in *EmitIssue_Request, opts ...grpc.CallOption) (*EmitIssue_Response, error)
}

type runnerClient struct {
	cc grpc.ClientConnInterface
}

func NewRunnerClient(cc grpc.ClientConnInterface) RunnerClient {
	return &runnerClient{cc}
}

func (c *runnerClient) ResourceContent(ctx context.Context, in *ResourceContent_Request, opts ...grpc.CallOption) (*ResourceContent_Response, error) {
	out := new(ResourceContent_Response)
	err := c.cc.Invoke(ctx, "/proto.Runner/ResourceContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) File(ctx context.Context, in *File_Request, opts ...grpc.CallOption) (*File_Response, error) {
	out := new(File_Response)
	err := c.cc.Invoke(ctx, "/proto.Runner/File", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) EvaluateExpr(ctx context.Context, in *EvaluateExpr_Request, opts ...grpc.CallOption) (*EvaluateExpr_Response, error) {
	out := new(EvaluateExpr_Response)
	err := c.cc.Invoke(ctx, "/proto.Runner/EvaluateExpr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runnerClient) EmitIssue(ctx context.Context, in *EmitIssue_Request, opts ...grpc.CallOption) (*EmitIssue_Response, error) {
	out := new(EmitIssue_Response)
	err := c.cc.Invoke(ctx, "/proto.Runner/EmitIssue", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RunnerServer is the server API for Runner service.
// All implementations must embed UnimplementedRunnerServer
// for forward compatibility
type RunnerServer interface {
	ResourceContent(context.Context, *ResourceContent_Request) (*ResourceContent_Response, error)
	File(context.Context, *File_Request) (*File_Response, error)
	EvaluateExpr(context.Context, *EvaluateExpr_Request) (*EvaluateExpr_Response, error)
	EmitIssue(context.Context, *EmitIssue_Request) (*EmitIssue_Response, error)
	mustEmbedUnimplementedRunnerServer()
}

// UnimplementedRunnerServer must be embedded to have forward compatible implementations.
type UnimplementedRunnerServer struct {
}

func (UnimplementedRunnerServer) ResourceContent(context.Context, *ResourceContent_Request) (*ResourceContent_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResourceContent not implemented")
}
func (UnimplementedRunnerServer) File(context.Context, *File_Request) (*File_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method File not implemented")
}
func (UnimplementedRunnerServer) EvaluateExpr(context.Context, *EvaluateExpr_Request) (*EvaluateExpr_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EvaluateExpr not implemented")
}
func (UnimplementedRunnerServer) EmitIssue(context.Context, *EmitIssue_Request) (*EmitIssue_Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmitIssue not implemented")
}
func (UnimplementedRunnerServer) mustEmbedUnimplementedRunnerServer() {}

// UnsafeRunnerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RunnerServer will
// result in compilation errors.
type UnsafeRunnerServer interface {
	mustEmbedUnimplementedRunnerServer()
}

func RegisterRunnerServer(s grpc.ServiceRegistrar, srv RunnerServer) {
	s.RegisterService(&Runner_ServiceDesc, srv)
}

func _Runner_ResourceContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResourceContent_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).ResourceContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Runner/ResourceContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).ResourceContent(ctx, req.(*ResourceContent_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_File_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).File(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Runner/File",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).File(ctx, req.(*File_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_EvaluateExpr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EvaluateExpr_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).EvaluateExpr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Runner/EvaluateExpr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).EvaluateExpr(ctx, req.(*EvaluateExpr_Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Runner_EmitIssue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmitIssue_Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RunnerServer).EmitIssue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Runner/EmitIssue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RunnerServer).EmitIssue(ctx, req.(*EmitIssue_Request))
	}
	return interceptor(ctx, in, info, handler)
}

// Runner_ServiceDesc is the grpc.ServiceDesc for Runner service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Runner_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Runner",
	HandlerType: (*RunnerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResourceContent",
			Handler:    _Runner_ResourceContent_Handler,
		},
		{
			MethodName: "File",
			Handler:    _Runner_File_Handler,
		},
		{
			MethodName: "EvaluateExpr",
			Handler:    _Runner_EvaluateExpr_Handler,
		},
		{
			MethodName: "EmitIssue",
			Handler:    _Runner_EmitIssue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "interface.proto",
}
